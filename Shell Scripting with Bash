Shell scripting with Bash26/6/2020)

why shell script---------
combining the multiple bashands from single file
file manipulation
running of other program 
uses simple test to run the cmds

I/O
varianles 
conditional execution(if,then,else,case)
loops
arithmetic
string manipulation
handiling script arguments
shell functions

#!/bin/bash  
Make a folder called as "bin" and put your scripts in there 
add the path "PATH="$PATH:~/bin"
Shebang line:- first line of script file starts with #!
separate which interpreter should run the code 
Bash scripts:
#!/bin/bash
other system then linux or mac OS 
May be bash in a different location 
#!user/bin/envbash :- this will find bash on the users path(may not works)
cant give options
results depends on teh isers configuration
How to check does scrpt file name is already used or not by using "type" cmds with file name 

Variables:--
Variables allow youtotemporarly store the data in memory and then retrive the date by name 
Variables are userd to store teh data by name
To create: just assign a value
Ex:- X=10 , if it already prasent with another value before executing tihs it will replace it with 10
better to write the variable names in lower case latters 

#!/bin/bash
date=$(date)
topic=$1
filename=~/${topic)notes.tex
read -p "your note" note
echo $date: $note >> $filename
echo Note \'$note' saved to $filename

#!/bin/bash -x (-x= prints everysingle line it executed) usefull for debuging 
set -x (used to debug executed cmds)
set +x (skip to show the executed cmds)

IF,Then,else ------

value returned by program upto exext 
when unix program ends it returns between 0 to 0.255
0(zero) means succes 
other means errors
exit cmd used to 
exit 0 script will end and writen success 

conditional expression = [[Expresion]] ex:- [[$str]] (if the string is not empty it will give true)

if[[ ! $1]]; then 
	echo "missing arguments"
	exit 1
fi
bimdir="${HOME}/bin"
filename="${bindir}/$1"
if [[-e $filename]]; then 
echo "filename ${filrnsmr} sltrsdy exists"
exit 1
fi


# check bin dir exists or not usnig nested if
if [[ ! -d $bindir]] then
#if not create a bindirif mkdir "$bindir"; then 
echo "create ${bindir}"
else
echo "cloud not created ${bindir}."
exit 1
fi
fi

#check number number shoud be a directory	
if [[$# -ne 2 ]]; then
echo "test message"
exit 1
if
# argument is a directory
if [[ ! -d $1 ]]; then 
echo "'$1'is a directory"
if

dir1="$1"
#get number of files in directory
count_1=$(ls-A1 "$dir1" | wc -l)

input & output


